# **📌 Phase 1: Planning & Architecture (Finalized with Updates)**  
This phase defines the **system structure, workflows, roles, database, API design, and tech stack** for the **Gas Cylinder Tracking Web App**.

---

## **🔹 1.1 User Roles & Responsibilities**
### **📌 1️⃣ Warehouse Workers (Mobile Web UI)**
✅ **Use phone camera to scan cylinders**  
✅ **Ship cylinders to customers**  
✅ **Receive and track returned cylinders**  
✅ **Send empty cylinders for refilling**  
✅ **Receive refilled cylinders back into stock**  

💡 **Key Considerations for Workers UI**  
- **Mobile-optimized web app** (fast, simple UI)  
- **Touch-friendly interface** (large buttons, simple navigation)  
- **QR code scanning directly from browser**  

---

### **📌 2️⃣ Admins (Desktop Web UI)**
✅ **Track all shipments in real-time**  
✅ **Monitor pending returns and refills**  
✅ **Generate reports on cylinder movements**  
✅ **Manage workers and refill stations**  
✅ **Add new cylinders to inventory**  
✅ **Re-print QR codes for existing cylinders**  
✅ **Trash (remove) cylinders from inventory**  
✅ **See which worker handled each shipment**  

💡 **Key Considerations for Admin UI**  
- **Dashboard with inventory status & trends**  
- **Live shipment tracking**  
- **Advanced filtering & analytics for reports**  
- **Worker activity monitoring**  

---

## **🔹 1.2 System Workflows**
| **Action** | **Workers UI (Mobile Web)** | **Admin UI (Desktop Web)** |
|------------|----------------------------|----------------------------|
| **Scan & Ship Cylinders** | Workers scan QR codes and confirm shipment | Admins track which worker handled the shipment |
| **Receive Returned Cylinders** | Workers scan and update return status | Admins see worker who confirmed return |
| **Send Cylinders for Refill** | Workers scan empty cylinders and send them | Admins monitor worker responsible for refill shipments |
| **Receive Refilled Cylinders** | Workers scan refilled cylinders | Admins see worker confirmation logs |
| **Track Inventory & Reports** | Workers check current stock | Admins generate analytics & reports |
| **Add New Cylinders** | ❌ Not available | ✅ Admins register new cylinders |
| **Re-print QR Codes** | ❌ Not available | ✅ Admins can generate & print new QR codes |
| **Trash Cylinders** | ❌ Not available | ✅ Admins can remove cylinders from inventory |

---

## **🔹 1.3 Technology Stack**
| **Component**  | **Technology**  |
|--------------|----------------|
| **Frontend (Web)** | React.js (for both Workers UI & Admin UI) |
| **UI Framework** | Tailwind CSS / Material-UI (MUI) |
| **QR Code Scanning** | `navigator.mediaDevices.getUserMedia` API (Web-based camera scanning) |
| **QR Code Generation** | qrcode.react / ZXing |
| **State Management** | Redux / React Context API |
| **Backend API** | Node.js (Express.js) / FastAPI |
| **Database** | PostgreSQL / MySQL |
| **Authentication** | JWT (JSON Web Tokens) |
| **Real-time Updates** | WebSockets / Firebase |
| **Hosting** | AWS / DigitalOcean / Vercel |
| **Reports & Analytics** | Chart.js / D3.js |
| **Monitoring & Logging** | Sentry / Datadog |

---

## **🔹 1.4 Database Schema**
To support **worker tracking, inventory control, and QR code generation**, we structure the database as follows:

### **📌 1️⃣ Users Table**
Stores **workers and admin accounts** with role-based access.
| Column | Type | Description |
|--------|------|-------------|
| `id` | INT (Primary Key) | Unique identifier for user |
| `username` | VARCHAR(255) | Unique worker/admin username |
| `password_hash` | TEXT | Secure password storage |
| `role` | ENUM | worker, admin |
| `created_at` | TIMESTAMP | When the account was created |

---

### **📌 2️⃣ Cylinders Table**
Tracks **each cylinder's status** (Available, Sent, In Refill, etc.).
| Column | Type | Description |
|--------|------|-------------|
| `id` | INT (Primary Key) | Unique identifier for each cylinder |
| `qr_code` | VARCHAR(255) | QR Code data (Generated on creation) |
| `status` | ENUM | Available, Sent, Returned, In Refill, Trashed |
| `created_at` | TIMESTAMP | When the cylinder was added |
| `updated_at` | TIMESTAMP | Last update time |

---

### **📌 3️⃣ Shipments Table**
Tracks **each shipment, including the worker responsible**.
| Column | Type | Description |
|--------|------|-------------|
| `id` | INT (Primary Key) | Unique identifier for shipment |
| `cylinder_id` | INT (Foreign Key) | Linked to Cylinders Table |
| `sent_by_worker_id` | INT (Foreign Key) | Tracks which worker sent the shipment |
| `received_by_worker_id` | INT (Foreign Key) | Tracks which worker confirmed return/refill |
| `sent_to` | VARCHAR(255) | Customer/Refill Station receiving the shipment |
| `status` | ENUM | Shipped, Received, In Refill, etc. |
| `timestamp` | TIMESTAMP | When the shipment was processed |

---

### **📌 4️⃣ Refills Table**
Tracks **cylinders that have been sent for refilling**.
| Column | Type | Description |
|--------|------|-------------|
| `id` | INT (Primary Key) | Unique identifier for refill request |
| `cylinder_id` | INT (Foreign Key) | Linked to Cylinders Table |
| `refill_station` | VARCHAR(255) | Station processing the refill |
| `status` | ENUM | Sent, Completed |
| `timestamp` | TIMESTAMP | When the refill was processed |

---

## **🔹 1.5 API Design**
### **📌 1️⃣ Authentication (JWT)**
✅ `POST /api/auth/login` → Worker/Admin Login  
✅ `POST /api/auth/register` → Register a New User  
✅ `GET /api/auth/logout` → Logout  

### **📌 2️⃣ Cylinder Management**
✅ `POST /api/cylinders/add` → Add a new cylinder (Admin only)  
✅ `POST /api/cylinders/trash` → Remove cylinder from inventory (Admin only)  
✅ `POST /api/cylinders/reprint` → Re-generate QR code (Admin only)  
✅ `POST /api/cylinders/ship` → Ship Cylinders  
✅ `POST /api/cylinders/return` → Mark Cylinders as Returned  
✅ `POST /api/cylinders/refill/send` → Send Cylinders for Refill  
✅ `POST /api/cylinders/refill/receive` → Mark Refilled Cylinders as Received  

### **📌 3️⃣ Admin Reports**
✅ `GET /api/admin/shipments` → View all shipments & workers handling them  
✅ `GET /api/admin/inventory` → View cylinder stock summary  
✅ `GET /api/admin/reports` → Generate analytics & trends  

---

## **🔹 1.6 What Might Be Missing?**
  
*QR Code Label Printing** – Allow admins to **print/download QR labels**  
 
Overdue Shipments Alert** – Notify admins if shipments are delayed  
